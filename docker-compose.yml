services:
  laravel_app:
    # Constrói a imagem Docker para a aplicação usando o Dockerfile na infraestrutura
    build:
      context: ./infrastructure/app  # Diretório do Dockerfile da infraestrutura
      dockerfile: Dockerfile
    container_name: laravel_app
    restart: "no"  # Não reinicia o container automaticamente para evitar conflitos de porta
    working_dir: /var/www  # Define o diretório de trabalho dentro do container
    volumes:
      # Monta o diretório da aplicação em /var/www no container para melhorar o desempenho
      - ./app:/var/www
      # Monta um arquivo de configuração PHP personalizado no container como somente leitura
      # Certifique-se de que todas as configurações necessárias estão incluídas no local.ini para evitar erros de runtime
      - ./infrastructure/php/local.ini:/usr/local/etc/php/conf.d/local.ini:ro
    ports:
      # Expõe a porta 9000 no host e a mapeia para a porta 9000 no container
      - "9000:9000"
    networks:
      - app-network  # Conecta o serviço app à rede personalizada app-network
    environment:
      # Define o modo Xdebug para habilitar os recursos de desenvolvimento e depuração
      - XDEBUG_MODE=develop,debug
      # Configura o Xdebug para conectar ao host para depuração
      - XDEBUG_CONFIG=client_host=host.docker.internal

  mysql:
    image: mysql:5.7  # Usa a versão 5.7 do MySQL
    container_name: mysql_db
    restart: always  # Sempre reinicia o container para garantir que o banco de dados permaneça em execução continuamente
    ports:
      # Expõe a porta 3306 no host e a mapeia para a porta 3306 no container
      - "3306:3306"
    environment:
      # Configura o banco de dados inicial e a senha do root usando variáveis de ambiente para maior segurança
      MYSQL_DATABASE: laravel
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
    secrets:
      - mysql_root_password
    volumes:
      # Armazena os dados do MySQL em um volume persistente para evitar perda de dados
      - dbdata:/var/lib/mysql
    networks:
      - app-network


  webserver:
    # Usa uma imagem personalizada do Nginx para garantir que todos os módulos necessários estejam disponíveis
    build:
      context: ./ # Muda o contexto de build para a raiz do projeto
      dockerfile: infrastructure/nginx/Dockerfile  # Dockerfile customizado para incluir todos os módulos necessários
    container_name: nginx_web
    restart: "no"  # Não reinicia o container automaticamente para evitar conflitos de porta
    ports:
      # Expõe a porta 8080 no host e a mapeia para a porta 80 no container
      - "80:80"
    volumes:
      # Monta o diretório da aplicação em /var/www no container para servir a aplicação
      - ./app:/var/www
      - ./infrastructure/nginx/logs:/var/log/nginx  # Monta o diretório de logs do Nginx para facilitar a depuração
    networks:
      - app-network  # Conecta o servidor web à rede personalizada app-network

networks:
  app-network:
    driver: bridge # overlay  Considere o uso de uma rede overlay para comunicação entre múltiplos hosts e maior segurança entre containers

volumes:
  dbdata:
    driver: local  # Usa um driver local para armazenar os dados do MySQL de forma persistente

secrets:
  mysql_root_password:
    file: ./secrets/mysql_root_password.txt  # Armazena a senha do root do MySQL em um arquivo de texto para maior segurança